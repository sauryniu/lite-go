// Code generated by MockGen. DO NOT EDIT.
// Source: object\i-string-generator.go

// Package object is a generated GoMock package.
package object

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIStringGenerator is a mock of IStringGenerator interface
type MockIStringGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIStringGeneratorMockRecorder
}

// MockIStringGeneratorMockRecorder is the mock recorder for MockIStringGenerator
type MockIStringGeneratorMockRecorder struct {
	mock *MockIStringGenerator
}

// NewMockIStringGenerator creates a new mock instance
func NewMockIStringGenerator(ctrl *gomock.Controller) *MockIStringGenerator {
	mock := &MockIStringGenerator{ctrl: ctrl}
	mock.recorder = &MockIStringGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIStringGenerator) EXPECT() *MockIStringGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockIStringGenerator) Generate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate
func (mr *MockIStringGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIStringGenerator)(nil).Generate))
}
