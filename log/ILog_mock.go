// Code generated by MockGen. DO NOT EDIT.
// Source: log\ILog.go

// Package log is a generated GoMock package.
package log

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockILog is a mock of ILog interface
type MockILog struct {
	ctrl     *gomock.Controller
	recorder *MockILogMockRecorder
}

// MockILogMockRecorder is the mock recorder for MockILog
type MockILogMockRecorder struct {
	mock *MockILog
}

// NewMockILog creates a new mock instance
func NewMockILog(ctrl *gomock.Controller) *MockILog {
	mock := &MockILog{ctrl: ctrl}
	mock.recorder = &MockILogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockILog) EXPECT() *MockILogMockRecorder {
	return m.recorder
}

// AddAttr mocks base method
func (m *MockILog) AddAttr(key, format string, v ...interface{}) ILog {
	m.ctrl.T.Helper()
	varargs := []interface{}{key, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAttr", varargs...)
	ret0, _ := ret[0].(ILog)
	return ret0
}

// AddAttr indicates an expected call of AddAttr
func (mr *MockILogMockRecorder) AddAttr(key, format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttr", reflect.TypeOf((*MockILog)(nil).AddAttr), varargs...)
}

// Debug mocks base method
func (m *MockILog) Debug() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug")
}

// Debug indicates an expected call of Debug
func (mr *MockILogMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockILog)(nil).Debug))
}

// Error mocks base method
func (m *MockILog) Error() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error")
}

// Error indicates an expected call of Error
func (mr *MockILogMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILog)(nil).Error))
}

// Info mocks base method
func (m *MockILog) Info() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info")
}

// Info indicates an expected call of Info
func (mr *MockILogMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockILog)(nil).Info))
}

// Warning mocks base method
func (m *MockILog) Warning() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warning")
}

// Warning indicates an expected call of Warning
func (mr *MockILogMockRecorder) Warning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*MockILog)(nil).Warning))
}
