// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ahl5esoft/lite-go/netex (interfaces: ISender)

// Package netex is a generated GoMock package.
package netex

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockISender is a mock of ISender interface
type MockISender struct {
	ctrl     *gomock.Controller
	recorder *MockISenderMockRecorder
}

// MockISenderMockRecorder is the mock recorder for MockISender
type MockISenderMockRecorder struct {
	mock *MockISender
}

// NewMockISender creates a new mock instance
func NewMockISender(ctrl *gomock.Controller) *MockISender {
	mock := &MockISender{ctrl: ctrl}
	mock.recorder = &MockISenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISender) EXPECT() *MockISenderMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockISender) Send(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockISenderMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockISender)(nil).Send), arg0, arg1)
}

// SendAndReceive mocks base method
func (m *MockISender) SendAndReceive(arg0 string, arg1 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndReceive", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAndReceive indicates an expected call of SendAndReceive
func (mr *MockISenderMockRecorder) SendAndReceive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndReceive", reflect.TypeOf((*MockISender)(nil).SendAndReceive), arg0, arg1)
}
