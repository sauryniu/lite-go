// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ahl5esoft/lite-go/api (interfaces: ICaller)

// Package api is a generated GoMock package.
package api

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockICaller is a mock of ICaller interface
type MockICaller struct {
	ctrl     *gomock.Controller
	recorder *MockICallerMockRecorder
}

// MockICallerMockRecorder is the mock recorder for MockICaller
type MockICallerMockRecorder struct {
	mock *MockICaller
}

// NewMockICaller creates a new mock instance
func NewMockICaller(ctrl *gomock.Controller) *MockICaller {
	mock := &MockICaller{ctrl: ctrl}
	mock.recorder = &MockICallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICaller) EXPECT() *MockICallerMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockICaller) Call(arg0 string, arg1 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockICallerMockRecorder) Call(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockICaller)(nil).Call), arg0, arg1)
}

// VoidCall mocks base method
func (m *MockICaller) VoidCall(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoidCall", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VoidCall indicates an expected call of VoidCall
func (mr *MockICallerMockRecorder) VoidCall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoidCall", reflect.TypeOf((*MockICaller)(nil).VoidCall), arg0, arg1)
}
