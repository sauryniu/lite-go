// Code generated by MockGen. DO NOT EDIT.
// Source: api\value\i-user-api-caller.go

// Package value is a generated GoMock package.
package value

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUserAPICaller is a mock of IUserAPICaller interface
type MockIUserAPICaller struct {
	ctrl     *gomock.Controller
	recorder *MockIUserAPICallerMockRecorder
}

// MockIUserAPICallerMockRecorder is the mock recorder for MockIUserAPICaller
type MockIUserAPICallerMockRecorder struct {
	mock *MockIUserAPICaller
}

// NewMockIUserAPICaller creates a new mock instance
func NewMockIUserAPICaller(ctrl *gomock.Controller) *MockIUserAPICaller {
	mock := &MockIUserAPICaller{ctrl: ctrl}
	mock.recorder = &MockIUserAPICallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserAPICaller) EXPECT() *MockIUserAPICallerMockRecorder {
	return m.recorder
}

// CommitUpdate mocks base method
func (m *MockIUserAPICaller) CommitUpdate(route string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitUpdate", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitUpdate indicates an expected call of CommitUpdate
func (mr *MockIUserAPICallerMockRecorder) CommitUpdate(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitUpdate", reflect.TypeOf((*MockIUserAPICaller)(nil).CommitUpdate), route)
}

// Update mocks base method
func (m *MockIUserAPICaller) Update(userID string, rewards ...Reward) {
	m.ctrl.T.Helper()
	varargs := []interface{}{userID}
	for _, a := range rewards {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Update", varargs...)
}

// Update indicates an expected call of Update
func (mr *MockIUserAPICallerMockRecorder) Update(userID interface{}, rewards ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{userID}, rewards...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserAPICaller)(nil).Update), varargs...)
}
