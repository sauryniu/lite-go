// Code generated by MockGen. DO NOT EDIT.
// Source: contract\i-unit-of-work-repository.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUnitOfWorkRepository is a mock of IUnitOfWorkRepository interface.
type MockIUnitOfWorkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUnitOfWorkRepositoryMockRecorder
}

// MockIUnitOfWorkRepositoryMockRecorder is the mock recorder for MockIUnitOfWorkRepository.
type MockIUnitOfWorkRepositoryMockRecorder struct {
	mock *MockIUnitOfWorkRepository
}

// NewMockIUnitOfWorkRepository creates a new mock instance.
func NewMockIUnitOfWorkRepository(ctrl *gomock.Controller) *MockIUnitOfWorkRepository {
	mock := &MockIUnitOfWorkRepository{ctrl: ctrl}
	mock.recorder = &MockIUnitOfWorkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUnitOfWorkRepository) EXPECT() *MockIUnitOfWorkRepositoryMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockIUnitOfWorkRepository) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockIUnitOfWorkRepositoryMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockIUnitOfWorkRepository)(nil).Commit))
}

// RegisterDelete mocks base method.
func (m *MockIUnitOfWorkRepository) RegisterDelete(entry IDbModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterDelete", entry)
}

// RegisterDelete indicates an expected call of RegisterDelete.
func (mr *MockIUnitOfWorkRepositoryMockRecorder) RegisterDelete(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDelete", reflect.TypeOf((*MockIUnitOfWorkRepository)(nil).RegisterDelete), entry)
}

// RegisterInsert mocks base method.
func (m *MockIUnitOfWorkRepository) RegisterInsert(entry IDbModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterInsert", entry)
}

// RegisterInsert indicates an expected call of RegisterInsert.
func (mr *MockIUnitOfWorkRepositoryMockRecorder) RegisterInsert(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInsert", reflect.TypeOf((*MockIUnitOfWorkRepository)(nil).RegisterInsert), entry)
}

// RegisterUpdate mocks base method.
func (m *MockIUnitOfWorkRepository) RegisterUpdate(entry IDbModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterUpdate", entry)
}

// RegisterUpdate indicates an expected call of RegisterUpdate.
func (mr *MockIUnitOfWorkRepositoryMockRecorder) RegisterUpdate(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUpdate", reflect.TypeOf((*MockIUnitOfWorkRepository)(nil).RegisterUpdate), entry)
}
