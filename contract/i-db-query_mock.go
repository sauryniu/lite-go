// Code generated by MockGen. DO NOT EDIT.
// Source: contract\i-db-query.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDbQuery is a mock of IDbQuery interface.
type MockIDbQuery struct {
	ctrl     *gomock.Controller
	recorder *MockIDbQueryMockRecorder
}

// MockIDbQueryMockRecorder is the mock recorder for MockIDbQuery.
type MockIDbQueryMockRecorder struct {
	mock *MockIDbQuery
}

// NewMockIDbQuery creates a new mock instance.
func NewMockIDbQuery(ctrl *gomock.Controller) *MockIDbQuery {
	mock := &MockIDbQuery{ctrl: ctrl}
	mock.recorder = &MockIDbQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDbQuery) EXPECT() *MockIDbQueryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockIDbQuery) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockIDbQueryMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIDbQuery)(nil).Count))
}

// Order mocks base method.
func (m *MockIDbQuery) Order(fields ...string) IDbQuery {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Order", varargs...)
	ret0, _ := ret[0].(IDbQuery)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockIDbQueryMockRecorder) Order(fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockIDbQuery)(nil).Order), fields...)
}

// OrderByDesc mocks base method.
func (m *MockIDbQuery) OrderByDesc(fields ...string) IDbQuery {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderByDesc", varargs...)
	ret0, _ := ret[0].(IDbQuery)
	return ret0
}

// OrderByDesc indicates an expected call of OrderByDesc.
func (mr *MockIDbQueryMockRecorder) OrderByDesc(fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByDesc", reflect.TypeOf((*MockIDbQuery)(nil).OrderByDesc), fields...)
}

// Skip mocks base method.
func (m *MockIDbQuery) Skip(v int) IDbQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Skip", v)
	ret0, _ := ret[0].(IDbQuery)
	return ret0
}

// Skip indicates an expected call of Skip.
func (mr *MockIDbQueryMockRecorder) Skip(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skip", reflect.TypeOf((*MockIDbQuery)(nil).Skip), v)
}

// Take mocks base method.
func (m *MockIDbQuery) Take(v int) IDbQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Take", v)
	ret0, _ := ret[0].(IDbQuery)
	return ret0
}

// Take indicates an expected call of Take.
func (mr *MockIDbQueryMockRecorder) Take(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockIDbQuery)(nil).Take), v)
}

// ToArray mocks base method.
func (m *MockIDbQuery) ToArray(dst interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToArray", dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToArray indicates an expected call of ToArray.
func (mr *MockIDbQueryMockRecorder) ToArray(dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToArray", reflect.TypeOf((*MockIDbQuery)(nil).ToArray), dst)
}

// Where mocks base method.
func (m *MockIDbQuery) Where(args ...interface{}) IDbQuery {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(IDbQuery)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockIDbQueryMockRecorder) Where(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockIDbQuery)(nil).Where), args...)
}
