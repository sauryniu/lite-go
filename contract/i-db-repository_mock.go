// Code generated by MockGen. DO NOT EDIT.
// Source: contract\i-db-repository.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDbRepository is a mock of IDbRepository interface.
type MockIDbRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIDbRepositoryMockRecorder
}

// MockIDbRepositoryMockRecorder is the mock recorder for MockIDbRepository.
type MockIDbRepositoryMockRecorder struct {
	mock *MockIDbRepository
}

// NewMockIDbRepository creates a new mock instance.
func NewMockIDbRepository(ctrl *gomock.Controller) *MockIDbRepository {
	mock := &MockIDbRepository{ctrl: ctrl}
	mock.recorder = &MockIDbRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDbRepository) EXPECT() *MockIDbRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIDbRepository) Delete(entry IDbModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIDbRepositoryMockRecorder) Delete(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDbRepository)(nil).Delete), entry)
}

// Insert mocks base method.
func (m *MockIDbRepository) Insert(entry IDbModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIDbRepositoryMockRecorder) Insert(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIDbRepository)(nil).Insert), entry)
}

// Query mocks base method.
func (m *MockIDbRepository) Query() IDbQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query")
	ret0, _ := ret[0].(IDbQuery)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockIDbRepositoryMockRecorder) Query() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIDbRepository)(nil).Query))
}

// Update mocks base method.
func (m *MockIDbRepository) Update(entry IDbModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIDbRepositoryMockRecorder) Update(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDbRepository)(nil).Update), entry)
}
