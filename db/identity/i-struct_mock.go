// Code generated by MockGen. DO NOT EDIT.
// Source: db\identity\i-struct.go

// Package identity is a generated GoMock package.
package identity

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIStruct is a mock of IStruct interface
type MockIStruct struct {
	ctrl     *gomock.Controller
	recorder *MockIStructMockRecorder
}

// MockIStructMockRecorder is the mock recorder for MockIStruct
type MockIStructMockRecorder struct {
	mock *MockIStruct
}

// NewMockIStruct creates a new mock instance
func NewMockIStruct(ctrl *gomock.Controller) *MockIStruct {
	mock := &MockIStruct{ctrl: ctrl}
	mock.recorder = &MockIStructMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIStruct) EXPECT() *MockIStructMockRecorder {
	return m.recorder
}

// FindFields mocks base method
func (m *MockIStruct) FindFields() []IField {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFields")
	ret0, _ := ret[0].([]IField)
	return ret0
}

// FindFields indicates an expected call of FindFields
func (mr *MockIStructMockRecorder) FindFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFields", reflect.TypeOf((*MockIStruct)(nil).FindFields))
}

// GetIDField mocks base method
func (m *MockIStruct) GetIDField() (IField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDField")
	ret0, _ := ret[0].(IField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDField indicates an expected call of GetIDField
func (mr *MockIStructMockRecorder) GetIDField() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDField", reflect.TypeOf((*MockIStruct)(nil).GetIDField))
}

// GetName mocks base method
func (m *MockIStruct) GetName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetName indicates an expected call of GetName
func (mr *MockIStructMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIStruct)(nil).GetName))
}

// GetType mocks base method
func (m *MockIStruct) GetType() reflect.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockIStructMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockIStruct)(nil).GetType))
}
