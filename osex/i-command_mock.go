// Code generated by MockGen. DO NOT EDIT.
// Source: osex\i-command.go

// Package osex is a generated GoMock package.
package osex

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockICommand is a mock of ICommand interface
type MockICommand struct {
	ctrl     *gomock.Controller
	recorder *MockICommandMockRecorder
}

// MockICommandMockRecorder is the mock recorder for MockICommand
type MockICommandMockRecorder struct {
	mock *MockICommand
}

// NewMockICommand creates a new mock instance
func NewMockICommand(ctrl *gomock.Controller) *MockICommand {
	mock := &MockICommand{ctrl: ctrl}
	mock.recorder = &MockICommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICommand) EXPECT() *MockICommandMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockICommand) Exec() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exec indicates an expected call of Exec
func (mr *MockICommandMockRecorder) Exec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockICommand)(nil).Exec))
}

// SetDir mocks base method
func (m *MockICommand) SetDir(format string, args ...interface{}) ICommand {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDir", varargs...)
	ret0, _ := ret[0].(ICommand)
	return ret0
}

// SetDir indicates an expected call of SetDir
func (mr *MockICommandMockRecorder) SetDir(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDir", reflect.TypeOf((*MockICommand)(nil).SetDir), varargs...)
}

// SetExpires mocks base method
func (m *MockICommand) SetExpires(expires time.Duration) ICommand {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpires", expires)
	ret0, _ := ret[0].(ICommand)
	return ret0
}

// SetExpires indicates an expected call of SetExpires
func (mr *MockICommandMockRecorder) SetExpires(expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpires", reflect.TypeOf((*MockICommand)(nil).SetExpires), expires)
}
