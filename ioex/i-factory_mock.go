// Code generated by MockGen. DO NOT EDIT.
// Source: ioex\i-factory.go

// Package ioex is a generated GoMock package.
package ioex

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIFactory is a mock of IFactory interface
type MockIFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIFactoryMockRecorder
}

// MockIFactoryMockRecorder is the mock recorder for MockIFactory
type MockIFactoryMockRecorder struct {
	mock *MockIFactory
}

// NewMockIFactory creates a new mock instance
func NewMockIFactory(ctrl *gomock.Controller) *MockIFactory {
	mock := &MockIFactory{ctrl: ctrl}
	mock.recorder = &MockIFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFactory) EXPECT() *MockIFactoryMockRecorder {
	return m.recorder
}

// BuildDirectory mocks base method
func (m *MockIFactory) BuildDirectory(pathArgs ...string) IDirectory {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range pathArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildDirectory", varargs...)
	ret0, _ := ret[0].(IDirectory)
	return ret0
}

// BuildDirectory indicates an expected call of BuildDirectory
func (mr *MockIFactoryMockRecorder) BuildDirectory(pathArgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDirectory", reflect.TypeOf((*MockIFactory)(nil).BuildDirectory), pathArgs...)
}

// BuildFile mocks base method
func (m *MockIFactory) BuildFile(pathArgs ...string) IFile {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range pathArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildFile", varargs...)
	ret0, _ := ret[0].(IFile)
	return ret0
}

// BuildFile indicates an expected call of BuildFile
func (mr *MockIFactoryMockRecorder) BuildFile(pathArgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildFile", reflect.TypeOf((*MockIFactory)(nil).BuildFile), pathArgs...)
}
