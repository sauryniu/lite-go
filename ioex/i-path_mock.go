// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ahl5esoft/lite-go/ioex (interfaces: IPath)

// Package ioex is a generated GoMock package.
package ioex

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIPath is a mock of IPath interface
type MockIPath struct {
	ctrl     *gomock.Controller
	recorder *MockIPathMockRecorder
}

// MockIPathMockRecorder is the mock recorder for MockIPath
type MockIPathMockRecorder struct {
	mock *MockIPath
}

// NewMockIPath creates a new mock instance
func NewMockIPath(ctrl *gomock.Controller) *MockIPath {
	mock := &MockIPath{ctrl: ctrl}
	mock.recorder = &MockIPathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPath) EXPECT() *MockIPathMockRecorder {
	return m.recorder
}

// Join mocks base method
func (m *MockIPath) Join(arg0 ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Join indicates an expected call of Join
func (mr *MockIPathMockRecorder) Join(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockIPath)(nil).Join), arg0...)
}
