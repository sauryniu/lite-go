// Code generated by MockGen. DO NOT EDIT.
// Source: plugin\db\i-repository.go

// Package db is a generated GoMock package.
package db

import (
	identity "github.com/ahl5esoft/lite-go/plugin/db/identity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIRepository is a mock of IRepository interface
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockIRepository) Add(entry identity.IIdentity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockIRepositoryMockRecorder) Add(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIRepository)(nil).Add), entry)
}

// Query mocks base method
func (m *MockIRepository) Query() IQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query")
	ret0, _ := ret[0].(IQuery)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockIRepositoryMockRecorder) Query() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIRepository)(nil).Query))
}

// Remove mocks base method
func (m *MockIRepository) Remove(entry identity.IIdentity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockIRepositoryMockRecorder) Remove(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIRepository)(nil).Remove), entry)
}

// Save mocks base method
func (m *MockIRepository) Save(entry identity.IIdentity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockIRepositoryMockRecorder) Save(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIRepository)(nil).Save), entry)
}
