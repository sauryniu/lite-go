// Code generated by MockGen. DO NOT EDIT.
// Source: plugin\db\i-query.go

// Package db is a generated GoMock package.
package db

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIQuery is a mock of IQuery interface
type MockIQuery struct {
	ctrl     *gomock.Controller
	recorder *MockIQueryMockRecorder
}

// MockIQueryMockRecorder is the mock recorder for MockIQuery
type MockIQueryMockRecorder struct {
	mock *MockIQuery
}

// NewMockIQuery creates a new mock instance
func NewMockIQuery(ctrl *gomock.Controller) *MockIQuery {
	mock := &MockIQuery{ctrl: ctrl}
	mock.recorder = &MockIQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIQuery) EXPECT() *MockIQueryMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockIQuery) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockIQueryMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIQuery)(nil).Count))
}

// Order mocks base method
func (m *MockIQuery) Order(fields ...string) IQuery {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Order", varargs...)
	ret0, _ := ret[0].(IQuery)
	return ret0
}

// Order indicates an expected call of Order
func (mr *MockIQueryMockRecorder) Order(fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockIQuery)(nil).Order), fields...)
}

// OrderByDesc mocks base method
func (m *MockIQuery) OrderByDesc(fields ...string) IQuery {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderByDesc", varargs...)
	ret0, _ := ret[0].(IQuery)
	return ret0
}

// OrderByDesc indicates an expected call of OrderByDesc
func (mr *MockIQueryMockRecorder) OrderByDesc(fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByDesc", reflect.TypeOf((*MockIQuery)(nil).OrderByDesc), fields...)
}

// Skip mocks base method
func (m *MockIQuery) Skip(v int) IQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Skip", v)
	ret0, _ := ret[0].(IQuery)
	return ret0
}

// Skip indicates an expected call of Skip
func (mr *MockIQueryMockRecorder) Skip(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skip", reflect.TypeOf((*MockIQuery)(nil).Skip), v)
}

// Take mocks base method
func (m *MockIQuery) Take(v int) IQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Take", v)
	ret0, _ := ret[0].(IQuery)
	return ret0
}

// Take indicates an expected call of Take
func (mr *MockIQueryMockRecorder) Take(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockIQuery)(nil).Take), v)
}

// ToArray mocks base method
func (m *MockIQuery) ToArray(dst interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToArray", dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToArray indicates an expected call of ToArray
func (mr *MockIQueryMockRecorder) ToArray(dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToArray", reflect.TypeOf((*MockIQuery)(nil).ToArray), dst)
}

// Where mocks base method
func (m *MockIQuery) Where(args ...interface{}) IQuery {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(IQuery)
	return ret0
}

// Where indicates an expected call of Where
func (mr *MockIQueryMockRecorder) Where(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockIQuery)(nil).Where), args...)
}
