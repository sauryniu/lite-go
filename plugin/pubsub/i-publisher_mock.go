// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ahl5esoft/lite-go/plugin/pubsub (interfaces: IPublisher)

// Package pubsub is a generated GoMock package.
package pubsub

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIPublisher is a mock of IPublisher interface
type MockIPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockIPublisherMockRecorder
}

// MockIPublisherMockRecorder is the mock recorder for MockIPublisher
type MockIPublisherMockRecorder struct {
	mock *MockIPublisher
}

// NewMockIPublisher creates a new mock instance
func NewMockIPublisher(ctrl *gomock.Controller) *MockIPublisher {
	mock := &MockIPublisher{ctrl: ctrl}
	mock.recorder = &MockIPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPublisher) EXPECT() *MockIPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockIPublisher) Publish(arg0 string, arg1 interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish
func (mr *MockIPublisherMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIPublisher)(nil).Publish), arg0, arg1)
}
