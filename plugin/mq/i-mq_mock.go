// Code generated by MockGen. DO NOT EDIT.
// Source: plugin\mq\i-mq.go

// Package mq is a generated GoMock package.
package mq

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIMQ is a mock of IMQ interface
type MockIMQ struct {
	ctrl     *gomock.Controller
	recorder *MockIMQMockRecorder
}

// MockIMQMockRecorder is the mock recorder for MockIMQ
type MockIMQMockRecorder struct {
	mock *MockIMQ
}

// NewMockIMQ creates a new mock instance
func NewMockIMQ(ctrl *gomock.Controller) *MockIMQ {
	mock := &MockIMQ{ctrl: ctrl}
	mock.recorder = &MockIMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMQ) EXPECT() *MockIMQMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockIMQ) Publish(channel string, message interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", channel, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockIMQMockRecorder) Publish(channel, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIMQ)(nil).Publish), channel, message)
}

// Subscribe mocks base method
func (m *MockIMQ) Subscribe(channel string, message chan<- string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", channel, message)
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockIMQMockRecorder) Subscribe(channel, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockIMQ)(nil).Subscribe), channel, message)
}
