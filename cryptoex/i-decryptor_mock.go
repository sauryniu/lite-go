// Code generated by MockGen. DO NOT EDIT.
// Source: cryptoex\i-decryptor.go

// Package cryptoex is a generated GoMock package.
package cryptoex

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIDecryptor is a mock of IDecryptor interface
type MockIDecryptor struct {
	ctrl     *gomock.Controller
	recorder *MockIDecryptorMockRecorder
}

// MockIDecryptorMockRecorder is the mock recorder for MockIDecryptor
type MockIDecryptorMockRecorder struct {
	mock *MockIDecryptor
}

// NewMockIDecryptor creates a new mock instance
func NewMockIDecryptor(ctrl *gomock.Controller) *MockIDecryptor {
	mock := &MockIDecryptor{ctrl: ctrl}
	mock.recorder = &MockIDecryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDecryptor) EXPECT() *MockIDecryptorMockRecorder {
	return m.recorder
}

// Decrypt mocks base method
func (m *MockIDecryptor) Decrypt(ciphertext []byte, options ...DecryptOption) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ciphertext}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Decrypt", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockIDecryptorMockRecorder) Decrypt(ciphertext interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ciphertext}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockIDecryptor)(nil).Decrypt), varargs...)
}
