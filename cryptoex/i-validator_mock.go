// Code generated by MockGen. DO NOT EDIT.
// Source: cryptoex\i-validator.go

// Package cryptoex is a generated GoMock package.
package cryptoex

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIValidator is a mock of IValidator interface
type MockIValidator struct {
	ctrl     *gomock.Controller
	recorder *MockIValidatorMockRecorder
}

// MockIValidatorMockRecorder is the mock recorder for MockIValidator
type MockIValidatorMockRecorder struct {
	mock *MockIValidator
}

// NewMockIValidator creates a new mock instance
func NewMockIValidator(ctrl *gomock.Controller) *MockIValidator {
	mock := &MockIValidator{ctrl: ctrl}
	mock.recorder = &MockIValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIValidator) EXPECT() *MockIValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockIValidator) Validate(ciphertext, plaintext []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ciphertext, plaintext)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockIValidatorMockRecorder) Validate(ciphertext, plaintext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIValidator)(nil).Validate), ciphertext, plaintext)
}
