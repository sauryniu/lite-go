// Code generated by MockGen. DO NOT EDIT.
// Source: cryptoex\i-encryptor.go

// Package cryptoex is a generated GoMock package.
package cryptoex

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIEncryptor is a mock of IEncryptor interface
type MockIEncryptor struct {
	ctrl     *gomock.Controller
	recorder *MockIEncryptorMockRecorder
}

// MockIEncryptorMockRecorder is the mock recorder for MockIEncryptor
type MockIEncryptorMockRecorder struct {
	mock *MockIEncryptor
}

// NewMockIEncryptor creates a new mock instance
func NewMockIEncryptor(ctrl *gomock.Controller) *MockIEncryptor {
	mock := &MockIEncryptor{ctrl: ctrl}
	mock.recorder = &MockIEncryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIEncryptor) EXPECT() *MockIEncryptorMockRecorder {
	return m.recorder
}

// Encrypt mocks base method
func (m *MockIEncryptor) Encrypt(plaintext []byte, options ...EncryptOption) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{plaintext}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Encrypt", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockIEncryptorMockRecorder) Encrypt(plaintext interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{plaintext}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockIEncryptor)(nil).Encrypt), varargs...)
}
